Last try:
Start with the data classes for game board & entities. (Typescript?) Entities have an id.
Add parser classes for game & boards.
Add an collision handler. (should check next positions and update then moves)
Add movement for things through game class.
Have one global game object on startup to implement the game.
Start with continuous polling before client side prediction.
Display standard game values on the client.

Implement lobby & sockets.
   Start with login screen.
   Choose existing lobby or create new lobby.
     Join the lobby.
     Get sessionId
     Toggle ready status.
     On leave remove clients from lobby.
     If everyone ready start game.

     If everyone dead stop game.
        Eventually start next map.

Remove old display on new game.

-- TODO --
Refactor client to a more structured code. (Doneish)
Can play with less players on map. (Done)
Choose team

Reduce update loop & use client side prediction.
    Update positions of entity instead of removing and adding elements.

Add a option for custom maps
Add random move if you do not move in x amount of seconds.
Map doesn't start immediately.


Stopblock

Update interface (display name)
Host can kick a player.
ClickableJoinLink

Add singleplayer.

If i ever want to do something:
- Teleports.
- Speed Boosts.
- Switch locations
